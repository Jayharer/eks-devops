name: Deploy to EKS

on:
  push:
    branches: [main]

jobs:
  # terraform apply/destroy
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false

    - name: Initialize Terraform
      run: terraform init

    - name: Validate Terraform
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan

    - name: Execute Terraform Apply
      run: |
          terraform apply -auto-approve
    
    - name: Handle output
      id: export 
      run: |
        outputs=$(terraform output -json)
        vpc_id_tmp=$(echo "$outputs" | jq -c .infrastructure_output.value.vpc_id)
        echo "vpc_id=$vpc_id_tmp" >> $GITHUB_OUTPUT
        ecr_repo_name_tmp=$(echo "$outputs" | jq -c .infrastructure_output.value.ecr_repo_name)
        echo "ecr_repo_name=$ecr_repo_name_tmp" >> $GITHUB_OUTPUT
    
    outputs:
        vpc_id: ${{steps.export.outputs.vpc_id}}
        ecr_repo_name: ${{steps.export.outputs.ecr_repo_name}}
  
  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:

      - name: Output Common variables
        run: |
          echo "ECR_REPO_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}" >> $GITHUB_ENV 
          echo "cluster_name=${{secrets.AWS_EKS_NAME}}" >> $GITHUB_ENV
          echo "aws_region=${{secrets.AWS_REGION}}" >> $GITHUB_ENV
          echo "aws_account_id=${{secrets.AWS_ACCOUNT_ID}}" >> $GITHUB_ENV
          echo "vpc_id=${{ needs.terraform.outputs.vpc_id }}" >> $GITHUB_ENV
          echo "ecr_repo_name=${{ needs.terraform.outputs.ecr_repo_name }}" >> $GITHUB_ENV

      - name: Print common variables 
        run: |
          echo "Using ECR URI: $ECR_REPO_URI"
          echo "vpc_id: $vpc_id"

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPO_URI 

      - name: Build and Push Docker Image
        run: |
          docker build -t myapp ./app/
          docker tag myapp:latest  $ECR_REPO_URI:myapp
          docker push  $ECR_REPO_URI:myapp

      - name: Update kubeconfig 
        run: |
          aws eks update-kubeconfig --region $aws_region --name $cluster_name
      
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
      
      - name: associate-iam-oidc-provider
        run: |
          eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve

      - name: create iamserviceaccount and iam role 
        run: |
          eksctl create iamserviceaccount --cluster=$cluster_name --namespace=kube-system --name=aws-alb-controller --role-name ALBControllerIAMRole --attach-policy-arn=arn:aws:iam::$aws_account_id:policy/ALBControllerIAMPolicy --override-existing-serviceaccounts  --region $aws_region --approve
      
      - name: Install Helm
        uses: azure/setup-helm@v3
      
      - name: Install aws-load-balancer-controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update eks 
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=$cluster_name --set serviceAccount.create=false --set serviceAccount.name=aws-alb-controller --set region=$aws_region --set vpcId=$vpc_id

      - name: Wait for aws-load-balancer-controller to become ready
        run: |
          echo "Sleeping for 40 seconds..."
          sleep 40

      - name: Deploy to EKS
        run: |
          sed -i "s/aws_account_id/$aws_account_id/g" ./k8s/deployment.yml
          sed -i "s/aws_region/$aws_region/g" ./k8s/deployment.yml
          sed -i "s/ecr_repo_name/$ecr_repo_name/g" ./k8s/deployment.yml
          kubectl apply -f k8s/
